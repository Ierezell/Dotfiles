###########
# Exports #
###########

###########
# Aliases #
###########
alias cdd='cd /mnt/Documents'
alias cdp='cd /mnt/Documents/Projets'
alias cdg='cd /mnt/Documents/Projets/git_clones'
alias cdbp='cd /mnt/Documents/Projets/BotPress/botpress'
alias cdrd='cd /mnt/Documents/Projets/BotPress/R_D'
alias ys='cd /mnt/Documents/Projets/BotPress/botpress && yarn start'
alias ybp='cd /mnt/Documents/Projets/BotPress/botpress && GULP_PARALLEL=true yarn build'
alias ywnqa='cd /mnt/Documents/Projets/BotPress/botpress/modules/new_qna && yarn watch'
alias sps='cd /mnt/Documents/Projets/BotPress/R_D/R_D_q_a/Docker/server && python server.py'
alias ysls='cd /mnt/Documents/Projets/BotPress/botpress && yarn start lang --dim=300'



################
# Special Keys #
################
# Fix home and end key
# create a zkbd compatible hash;
# to add other keys to this hash, see: man 5 terminfo
typeset -g -A key

key[Home]="${terminfo[khome]}"
key[End]="${terminfo[kend]}"
key[Insert]="${terminfo[kich1]}"
key[Backspace]="${terminfo[kbs]}"
key[Delete]="${terminfo[kdch1]}"
key[Up]="${terminfo[kcuu1]}"
key[Down]="${terminfo[kcud1]}"
key[Left]="${terminfo[kcub1]}"
key[Right]="${terminfo[kcuf1]}"
key[PageUp]="${terminfo[kpp]}"
key[PageDown]="${terminfo[knp]}"
key[Shift-Tab]="${terminfo[kcbt]}"

# setup key accordingly
[[ -n "${key[Home]}"      ]] && bindkey -- "${key[Home]}"      beginning-of-line
[[ -n "${key[End]}"       ]] && bindkey -- "${key[End]}"       end-of-line
[[ -n "${key[Insert]}"    ]] && bindkey -- "${key[Insert]}"    overwrite-mode
[[ -n "${key[Backspace]}" ]] && bindkey -- "${key[Backspace]}" backward-delete-char
[[ -n "${key[Delete]}"    ]] && bindkey -- "${key[Delete]}"    delete-char
[[ -n "${key[Up]}"        ]] && bindkey -- "${key[Up]}"        up-line-or-history
[[ -n "${key[Down]}"      ]] && bindkey -- "${key[Down]}"      down-line-or-history
[[ -n "${key[Left]}"      ]] && bindkey -- "${key[Left]}"      backward-char
[[ -n "${key[Right]}"     ]] && bindkey -- "${key[Right]}"     forward-char
[[ -n "${key[PageUp]}"    ]] && bindkey -- "${key[PageUp]}"    beginning-of-buffer-or-history
[[ -n "${key[PageDown]}"  ]] && bindkey -- "${key[PageDown]}"  end-of-buffer-or-history
[[ -n "${key[Shift-Tab]}" ]] && bindkey -- "${key[Shift-Tab]}" reverse-menu-complete

bindkey "^[[1;5C" forward-word
bindkey "^[[1;5D" backward-word

# Finally, make sure the terminal is in application mode, when zle is
# active. Only then are the values from $terminfo valid.
if (( ${+terminfo[smkx]} && ${+terminfo[rmkx]} )); then
	autoload -Uz add-zle-hook-widget
	function zle_application_mode_start { echoti smkx }
	function zle_application_mode_stop { echoti rmkx }
	add-zle-hook-widget -Uz zle-line-init zle_application_mode_start
	add-zle-hook-widget -Uz zle-line-finish zle_application_mode_stop
fi
autoload -Uz up-line-or-beginning-search down-line-or-beginning-search
zle -N up-line-or-beginning-search
zle -N down-line-or-beginning-search

[[ -n "${key[Up]}"   ]] && bindkey -- "${key[Up]}"   up-line-or-beginning-search
[[ -n "${key[Down]}" ]] && bindkey -- "${key[Down]}" down-line-or-beginning-search

###########
# History #
###########
HISTFILE=~/.histfile
HISTSIZE=1000
SAVEHIST=1000
zstyle ':completion:*' menu select

#########
# Zinit #
#########
source "$HOME/.zinit/bin/zinit.zsh"
autoload -Uz _zinit
(( ${+_comps} )) && _comps[zinit]=_zinit

setopt promptsubst

# Load a few important annexes, without Turbo
# (this is currently required for annexes)
zinit light-mode for \
    zinit-zsh/z-a-rust \
    zinit-zsh/z-a-as-monitor \
    zinit-zsh/z-a-patch-dl \
    zinit-zsh/z-a-bin-gem-node

# Plugins
zinit ice pick"async.zsh" src"pure.zsh"
zinit light sindresorhus/pure

zinit for \
    light-mode  zsh-users/zsh-autosuggestions \
    light-mode  zdharma/fast-syntax-highlighting \
                zdharma/history-search-multi-word \
    light-mode pick"async.zsh" src"pure.zsh" \
                sindresorhus/pure

zinit wait lucid light-mode for \
  atinit"zicompinit; zicdreplay" \
      zdharma/fast-syntax-highlighting \
      zdharma/history-search-multi-word \
  atload"_zsh_autosuggest_start" \
      zsh-users/zsh-autosuggestions \
      OMZP::sudo \
  blockf atpull'zinit creinstall -q .' \
      zsh-users/zsh-completions

#zinit wait lucid for \
#        OMZL::git.zsh \
#  atload"unalias grv" \
#        OMZP::git

# PS1="READY >" # provide a simple prompt till the theme loads

#OhMyZsh theme exemple
# zinit wait'!' lucid for \
#    OMZL::prompt_info_functions.zsh \
#    OMZT::af-magic

#zinit wait lucid for \
#        OMZL::git.zsh \
#  atload"unalias grv" \
#        OMZP::git

#######
# NVM #
#######
source /usr/share/nvm/init-nvm.sh
